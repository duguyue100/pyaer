#!/usr/bin/env bash

# This script is to compile libcaer library and Python 2 interface
# Author: Yuhuang Hu
# Email : duguyue100@gmail.com

# option
fn=$1

# customize this to the right Python library
CONDA_LIB_PATH=$HOME/anaconda2/lib
CONDA_PKG_CONFIG_PATH=$CONDA_LIB_PATH/pkgconfig

if [ -f $PWD/compile.conf ]; then
    source $PWD/compile.conf
else
    echo "[MESSAGE] No compile.conf found, use default configuration settings."
fi

compile_swigpy()
{
    echo "[MESSAGE] Compiling libcaer swig binding"
    if [ ! -d "$PWD/swigpy" ]; then
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PWD/libcaer/build/lib/pkgconfig
        export PKG_CONFIG_PATH=$CONDA_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=$CONDA_LIB_PATH:$(pkg-config --variable=libdir libcaer):$LD_LIBRARY_PATH

        # summary information
        echo '[MESSAGE] libcaer include directory: '$(pkg-config --variable=includedir libcaer)
        echo '[MESSAGE] libcaer library directory: '$(pkg-config --variable=libdir libcaer)
        echo '[MESSAGE] LD_LIBRARY_PATH          : '$(LD_LIBRARY_PATH)

        # compile swig interface
        mkdir swigpy
        cd swigpy
        cp $PWD/../libcaer/bindings/python_swig/pyflags.i .
        swig -python -I$(pkg-config --variable=includedir libcaer) -cpperraswarn pyflags.i
        gcc -std=c11 -O2 -fPIC -c pyflags_wrap.c $(pkg-config --cflags python2) -I$(pkg-config --variable=includedir libcaer)
        ld --library-path=$(pkg-config --variable=libdir libcaer) -shared -lcaer pyflags_wrap.o -o _libcaer_wrap.so

        # configure path
        # for .bashrc
        if [ -f $HOME/.bashrc ]; then
            cp $HOME/.bashrc $HOME/.bashrc.pyaer.bak
            echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'$(pkg-config --variable=libdir libcaer) >> $HOME/.bashrc
            echo 'LD_LIBRARY_PATH is appended in '$HOME/.bashrc
        fi
        # for .zshrc
        if [ -f $HOME/.zshrc ]; then
            cp $HOME/.zshrc $HOME/.zshrc.pyaer.bak
            echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'$(pkg-config --variable=libdir libcaer) >> $HOME/.zshrc
            echo 'LD_LIBRARY_PATH is appended in '$HOME/.zshrc
        fi

        echo '[MESSAGE] LD_LIBRARY_PATH configured.'
        echo '[MESSAGE] Please restart your terminal or source your shell profile.'
    else
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PWD/libcaer/build/lib/pkgconfig
        export PKG_CONFIG_PATH=$CONDA_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=$CONDA_LIB_PATH:$(pkg-config --variable=libdir libcaer):$LD_LIBRARY_PATH

        echo '[MESSAGE] libcaer include directory: '$(pkg-config --variable=includedir libcaer)
        echo '[MESSAGE] libcaer library directory: '$(pkg-config --variable=libdir libcaer)
        echo '[MESSAGE] LD_LIBRARY_PATH          : '$(LD_LIBRARY_PATH)
    fi
}

compile_libcaer()
{
    echo "[MESSAGE] Compiling libcaer"
    cd libcaer
    if [ ! -d "$PWD/libcaer/build" ]; then
        mkdir compiled
        mkdir build
    fi
    cd compiled
    cmake -DCMAKE_INSTALL_PREFIX=../build ..
    make -j8
    make install
    cd ../..
    rm -rf $PWD/libcaer/compiled
}

make_install()
{
    echo "[MESSAGE] Installing..."
    cp $PWD/swigpy/_libcaer_wrap.so $PWD/pyaer
    cp $PWD/swigpy/libcaer_wrap.py $PWD/pyaer
    echo "[MESSAGE] Installation completed."
}

# cleaning functions
clean_swigpy()
{
    echo "[MESSAGE] Cleaning SWIG files."
    rm -rf $PWD/swigpy
    echo "[MESSAGE] SWIG files removed."
}

clean_libcaer()
{
    echo "[MESSAGE] Cleaning libcaer installation."
    rm -rf $PWD/libcaer/compiled
    rm -rf $PWD/libcaer/build
    echo "[MESSAGE] libcaer files removed."
}

clean_install()
{
    echo "[MESSAGE] Cleaning Compiled interface."
    rm $PWD/pyaer/_libcaer_wrap.so
    rm $PWD/pyaer/libcaer_wrap.py

    # restore bash profile
    if [ -f $HOME/.bashrc.pyaer.bak ]; then
        cp $HOME/.bashrc.pyaer.bak $HOME/.bashrc
    fi
    if [ -f $HOME/.zshrc.pyaer.bak ]; then
        cp $HOME/.zshrc.pyaer.bask $HOME/.zshrc
    fi

    echo "[MESSAGE] Installation removed."
}

case "$fn" in
    "make.swig")
        compile_swigpy
    ;;

    "clean.swig")
        clean_swigpy
    ;;

    "make.lib")
        compile_libcaer
    ;;

    "clean.lib")
        clean_libcaer
    ;;

    "make.install")
        make_install
    ;;

    "clean.install")
        clean_install
    ;;

    "make")
        # compile libcaer
        compile_libcaer

        # compile swigpy
        compile_swigpy
    ;;
    
    "clean")
        # SWIG
        clean_swigpy

        # remove compiled SWIG
        clean_install

        # remove libcaer files
        clean_libcaer
    ;;

esac
