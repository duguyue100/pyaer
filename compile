#!/usr/bin/env bash

# This script is to compile libcaer library and Python 2 interface
# Author: Yuhuang Hu
# Email : duguyue100@gmail.com

# option
fn=$1

# for installation check
INSTALL_OPT="no"
ENABLE_INSTALL=false

# customize this to the right configuration
REBUILDING=false
PYTHON_VERSION=2  # TODO: support Python 3 as well
CONDA_LIB_PATH=$HOME/anaconda2/lib
CONDA_PKG_CONFIG_PATH=$CONDA_LIB_PATH/pkgconfig
LIBCAER_INSTALLED=false

# Color Profile
RED='\033[0;31m'
LIGHT_BLUE='\033[1;34m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
COLOR_END='\033[0m'

print_help()
{
    echo -e "${PURPLE} --------------------------------------------------------------------${COLOR_END}"
    echo -e "${PURPLE} Compilation Sequences for PyAER${COLOR_END}"
    echo -e "${PURPLE} This script is developed by Yuhuang Hu@INI@UZH/ETHz${COLOR_END}"
    echo -e "${PURPLE} Contact: yuhuang.hu@ini.uzh.ch${COLOR_END}"
    echo -e "${PURPLE}  ${COLOR_END}"
    echo -e "${PURPLE} Available functions:${COLOR_END}"
    echo -e "${PURPLE} make          : make libcaer and SWIG Python bindings${COLOR_END}"
    echo -e "${PURPLE} make.lib      : make libcaer${COLOR_END}"
    echo -e "${PURPLE} make.swig     : make Python bindings based on SWIG${COLOR_END}"
    echo -e "${PURPLE} make.install  : Install Python bindings${COLOR_END}"
    echo -e "${PURPLE} clean         : Clean installation and compilation files.${COLOR_END}"
    echo -e "${PURPLE} clean.lib     : Clean libcaer compilation files${COLOR_END}"
    echo -e "${PURPLE} clean.swig    : Clean SWIG bindings${COLOR_END}"
    echo -e "${PURPLE} clean.install : Clean installation${COLOR_END}"
    echo -e "${PURPLE} help          : Print help${COLOR_END}"
    echo -e "${PURPLE}  ${COLOR_END}"
    echo -e "${PURPLE} Available configuration:${COLOR_END}"
    echo -e "${PURPLE} REBUILDING (bool)           : false if first time, true if not${COLOR_END}"
    echo -e "${PURPLE} PYTHON_VERSION (int)        : 2 for Python 2, 3 for Python 3${COLOR_END}"
    echo -e "${PURPLE} CONDA_LIB_PATH (str)        : Path to custom Python library${COLOR_END}"
    echo -e "${PURPLE} CONDA_PKG_CONFIG_PATH (str) : Path to custom Python pkg-config files${COLOR_END}"
    echo -e "${PURPLE} LIBCAER_INSTALLED (bool)    : false if build libcaer locally,${COLOR_END}"
    echo -e "${PURPLE}                               true  if you have libcaer installed in system${COLOR_END}"
    echo -e "${PURPLE} --------------------------------------------------------------------${COLOR_END}"
}

is_yes()
{
    yesses={y,Y,yes,Yes,YES}
    if [[ $yesses =~ $1 ]]; then
        echo 1
    fi
}

print_conf()
{
    echo -e "${LIGHT_BLUE}PYTHON VERSION       : $PYTHON_VERSION${COLOR_END}"
    echo -e "${LIGHT_BLUE}CONDA LIB PATH       : $CONDA_LIB_PATH${COLOR_END}"
    echo -e "${LIGHT_BLUE}CONDA PKG CONFIG PATH: $CONDA_PKG_CONFIG_PATH${COLOR_END}"
}


continue_install()
{
    echo -e "${RED}[MESSAGE] Continue installation? (yes/no) [$INSTALL_OPT]${COLOR_END}"
    read opt
    if [[ $opt == "" ]]; then
        opt=$INSTALL_OPT
    fi

    if [[ $(is_yes $opt) ]]; then
        ENABLE_INSTALL=true
        print_conf
    fi
}


config_installation()
{
    if [ -f $PWD/compile.conf ]; then
        source $PWD/compile.conf
        echo -e "${RED}[MESSAGE] Using customize configuration in the file compile.conf.${COLOR_END}"
        continue_install
    else
        echo -e "${RED}[MESSAGE] No compile.conf found, use default configuration settings if continue installation.${COLOR_END}"
        echo -e "${RED}[MESSAGE] Use:${COLOR_END}"
        echo -e "${BLUE}              cp compile.conf.bak compile.conf${COLOR_END}"
        echo -e "${RED}          to create your configuration file if you need.${COLOR_END}"
        continue_install
    fi
}

compile_swigpy()
{
    echo -e "${BLUE}[MESSAGE] Compiling libcaer swig binding${COLOR_END}"
    if [ ! -d "$PWD/swigpy" ]; then
        if [ $LIBCAER_INSTALLED == false ]; then
            export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PWD/libcaer/build/lib/pkgconfig
        fi
        export PKG_CONFIG_PATH=$CONDA_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=$CONDA_LIB_PATH:$(pkg-config --variable=libdir libcaer):$LD_LIBRARY_PATH

        # summary information
        echo -e "${LIGHT_BLUE}[MESSAGE] libcaer include directory: "$(pkg-config --variable=includedir libcaer)${COLOR_END}
        echo -e "${LIGHT_BLUE}[MESSAGE] libcaer library directory: "$(pkg-config --variable=libdir libcaer)${COLOR_END}
        echo -e "${LIGHT_BLUE}[MESSAGE] LD_LIBRARY_PATH          : "$LD_LIBRARY_PATH ${COLOR_END}

        # compile swig interface
        mkdir swigpy
        cd swigpy
        cp $PWD/../libcaer/bindings/python_swig/pyflags.i .
        swig -python -I$(pkg-config --variable=includedir libcaer) -cpperraswarn pyflags.i
        if [ $PYTHON_VERSION == 2 ]; then
            echo -e "${BLUE}[MESSAGE] Your swig installation should be compile with python 2 library${COLOR_END}"
            gcc -std=c11 -O2 -fPIC -c pyflags_wrap.c $(pkg-config --cflags python2) -I$(pkg-config --variable=includedir libcaer)
        elif [ $PYTHON_VERSION == 3]; then
            echo -e "${BLUE}[MESSAGE] Your swig installation should be compile with python 3 library${COLOR_END}"
            gcc -std=c11 -O2 -fPIC -c pyflags_wrap.c $(pkg-config --cflags python3) -I$(pkg-config --variable=includedir libcaer)
        fi
        if [ "$(uname)" == "Darwin" ]; then
            ld -L $(pkg-config --variable=libdir libcaer) -lcaer pyflags_wrap.o -o _libcaer_wrap.so
        elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
            ld -L $(pkg-config --variable=libdir libcaer) -shared -lcaer pyflags_wrap.o -o _libcaer_wrap.so
        fi

        # configure path
        if [ $LIBCAER_INSTALLED == false ]; then
            if [[ $REBUILDING == false ]]; then
                NEW_LD_PATH="export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$(pkg-config --variable=libdir libcaer)
                # for .bashrc
                if [ -f $HOME/.bashrc ]; then
                    cp $HOME/.bashrc $HOME/.bashrc.pyaer.bak
                    echo $NEW_LD_PATH >> $HOME/.bashrc
                    echo -e "${GREEN}LD_LIBRARY_PATH is appended in "$HOME/.bashrc${COLOR_END}
                fi
                # for .zshrc
                if [ -f $HOME/.zshrc ]; then
                    cp $HOME/.zshrc $HOME/.zshrc.pyaer.bak
                    echo $NEW_LD_PATH >> $HOME/.zshrc
                    echo -e "${GREEN}LD_LIBRARY_PATH is appended in "$HOME/.zshrc${COLOR_END}
                fi
                echo -e "${BLUE}[MESSAGE] LD_LIBRARY_PATH configured.${COLOR_END}"
                echo -e "${BLUE}[MESSAGE] Please restart your terminal or source your shell profile.${COLOR_END}"
            else
                # not appending LD_LIBRARY_PATH if true
                echo -e "${RED}[MESSAGE] Rebuilding enabled, no LD_LIBRARY_PATH appended.${COLOR_END}"
            fi
        fi
    else
        if [ $LIBCAER_INSTALLED == false ]; then
            export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PWD/libcaer/build/lib/pkgconfig
        fi
        export PKG_CONFIG_PATH=$CONDA_PKG_CONFIG_PATH:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=$CONDA_LIB_PATH:$(pkg-config --variable=libdir libcaer):$LD_LIBRARY_PATH

        echo -e "${LIGHT_BLUE}[MESSAGE] libcaer include directory: "$(pkg-config --variable=includedir libcaer)${COLOR_END}
        echo -e "${LIGHT_BLUE}[MESSAGE] libcaer library directory: "$(pkg-config --variable=libdir libcaer)${COLOR_END}
        echo -e "${LIGHT_BLUE}[MESSAGE] LD_LIBRARY_PATH          : "$LD_LIBRARY_PATH ${COLOR_END}
    fi
}

compile_libcaer()
{
    echo -e "${BLUE}[MESSAGE] Compiling libcaer${COLOR_END}"
    cd libcaer
    if [ ! -d "$PWD/libcaer/build" ]; then
        mkdir compiled
        mkdir build
    fi
    cd compiled
    cmake -DCMAKE_INSTALL_PREFIX=../build ..
    make -j8
    make install
    cd ../..
    rm -rf $PWD/libcaer/compiled
}

make_install()
{
    echo -e "${BLUE}[MESSAGE] Installing Python bindings...${COLOR_END}"
    cp $PWD/swigpy/_libcaer_wrap.so $PWD/pyaer
    cp $PWD/swigpy/libcaer_wrap.py $PWD/pyaer
    echo -e "${BLUE}[MESSAGE] Installation completed.${COLOR_END}"
}

# cleaning functions
clean_swigpy()
{
    echo -e "${BLUE}[MESSAGE] Cleaning SWIG files.${COLOR_END}"
    rm -rf $PWD/swigpy
    echo -e "${BLUE}[MESSAGE] SWIG files removed.${COLOR_END}"
}

clean_libcaer()
{
    echo -e "${BLUE}[MESSAGE] Cleaning libcaer installation.${COLOR_END}"
    rm -rf $PWD/libcaer/build
    echo -e "${BLUE}[MESSAGE] libcaer files removed.${COLOR_END}"
}

clean_install()
{
    echo -e "${BLUE}[MESSAGE] Cleaning Compiled interface.${COLOR_END}"
    rm $PWD/pyaer/_libcaer_wrap.so
    rm $PWD/pyaer/libcaer_wrap.py

    # restore bash profile
    if [ -f $HOME/.bashrc.pyaer.bak ]; then
        cp $HOME/.bashrc.pyaer.bak $HOME/.bashrc
    fi
    if [ -f $HOME/.zshrc.pyaer.bak ]; then
        cp $HOME/.zshrc.pyaer.bask $HOME/.zshrc
    fi

    echo -e "${BLUE}[MESSAGE] Installation removed.${COLOR_END}"
}

if [ $fn == "help" ]; then
    print_help
    exit 1
fi

config_installation

# main work flow
if [ $ENABLE_INSTALL = true ]; then
    case "$fn" in
        "make.swig")
            compile_swigpy
        ;;

        "clean.swig")
            clean_swigpy
        ;;

        "make.lib")
            compile_libcaer
        ;;

        "clean.lib")
            clean_libcaer
        ;;

        "make.install")
            make_install
        ;;

        "clean.install")
            clean_install
        ;;

        "make")
            # compile libcaer
            if [ $LIBCAER_INSTALLED == false ]; then
                compile_libcaer
            fi

            # compile swigpy
            compile_swigpy
        ;;
        
        "clean")
            # SWIG
            clean_swigpy

            # remove compiled SWIG
            clean_install

            # remove libcaer files
            clean_libcaer
        ;;
    esac
else
    echo -e "${RED}[MESSAGE] Installation interrupted.${COLOR_END}"
fi
