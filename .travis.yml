cache:
  directories:
    - $HOME/download
    - $HOME/.cache/pip

language: generic

os: linux

env:
    global:
        - TWINE_USERNAME=duguyue100

jobs:
    include:
        - os: linux
          language: python
          python: "3.5"
          env: TOXENV=py35
        - os: linux
          language: python
          python: "3.6"
          env: TOXENV=py36
        - os: linux
          language: python
          python: "3.7"
          env: TOXENV=py37
        - os: linux
          language: python
          python: "3.8"
          env: TOXENV=py38
        # - os: linux
        #   language: python
        #   python: "3.9"
        #   env: TOXENV=py39
        - os: osx
          env:
              - TOXENV=3.5
              - HOMEBREW_NO_AUTO_UPDATE=1
        - os: osx
          env:
              - TOXENV=3.6
              - HOMEBREW_NO_AUTO_UPDATE=1
        - os: osx
          env:
              - TOXENV=3.7
              - HOMEBREW_NO_AUTO_UPDATE=1
        - os: osx
          env:
              - TOXENV=3.8
              - HOMEBREW_NO_AUTO_UPDATE=1
        # - os: osx
        #   env:
        #       - TOXENV=3.9
        #       - HOMEBREW_NO_AUTO_UPDATE=1
        - os: linux
          arch: arm64
          language: python
          python: "3.5"
          env: TOXENV=py35
        - os: linux
          arch: arm64
          language: python
          python: "3.6"
          env: TOXENV=py36
        - os: linux
          arch: arm64
          language: python
          python: "3.7"
          env: TOXENV=py37
        - os: linux
          arch: arm64
          language: python
          python: "3.8"
          env: TOXENV=py38
        # - os: linux
        #   arch: arm64
        #   language: python
        #   python: "3.9"
        #   env: TOXENV=py39

deploy:
  provider: releases
  token: $GITHUB_TOKEN 
  file_glob: true
  file: dist/*.whl
  on:
    tags: true

before_install:
    - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            mkdir -p download;
            cd download;
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
            chmod +x miniconda.sh;
            ./miniconda.sh -b -p $HOME/miniconda;
            export PATH=$HOME/miniconda/bin:$PATH;
            conda info -a;
            conda update --yes conda;
            conda create -n pyenv python=$TOXENV --yes;
            source activate pyenv;
            cd ..;
      fi
    - python --version
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo apt-add-repository -y "ppa:ubuntu-toolchain-r/test";
        sudo apt-get -qq update;
        sudo apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-5 g++-5;
        sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-5 /usr/bin/gcc;
        sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-5 /usr/bin/g++;
        gcc --version;
      fi
    - if [[ "$TRAVIS_CPU_ARCH" == "arm64" ]]; then
        sudo apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-7 g++-7;
        sudo unlink /usr/bin/gcc && sudo ln -s /usr/bin/gcc-7 /usr/bin/gcc;
        sudo unlink /usr/bin/g++ && sudo ln -s /usr/bin/g++-7 /usr/bin/g++;
        gcc --version;
      fi
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo apt-get install build-essential -y;
        sudo apt-get install libusb-1.0-0-dev -y;
        sudo apt-get install automake -y;
        sudo apt-get install bison -y;

        sudo apt-get install snapd;
        sudo snap install cmake --classic;
        export PATH=/snap/bin:$PATH;
      else
        brew install libusb;
        brew install automake;
        brew install bison;
      fi
    - git clone git://sigrok.org/libserialport
    - cd libserialport
    - ./autogen.sh
    - ./configure
    - make -j4
    - sudo make install
    - cd ..
    - $HOME/build/duguyue100/pyaer/install-libcaer.sh ci
    - git clone https://github.com/duguyue100/swig
    - cd swig
    - ./autogen.sh
    - ./configure --without-alllang --with-python=$(command -v python) --without-pcre
    - make
    - sudo make install
    - cd ..

install:
    - pip install numpy==1.18.0
    - pip install future -U
    - pip install wheel
    - if [[ $TRAVIS_TAG ]]; then
        pip install twine;
      fi

script:
    - make build-wheel
    - make build-wheel
    - make install
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        cd dist;
        for file in *.whl ; do mv $file ${file//linux/manylinux1} ; done;
        cd ..; 
      fi
    - if [[ $TRAVIS_TAG && "$TRAVIS_CPU_ARCH" != "arm64" ]]; then
        twine upload -u ${TWINE_USERNAME} -p ${TWINE_PASSWORD} dist/*.whl;
      fi

branches:
  except:
    - refactor-compiling

notifications:
  email: false
